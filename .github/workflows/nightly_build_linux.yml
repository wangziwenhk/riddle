name: Nightly Build
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs: # 把结果传给后续 Job
      build_needed: ${{ steps.result.outputs.build_needed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Did anything change in 24h?
        id: result
        shell: bash
        run: |
          # 统计过去 24 小时内的新提交数量（不含 merge commit）
          COUNT=$(git rev-list --no-merges --count --since="24 hours ago" HEAD)
          if [ "$COUNT" -gt 0 ]; then
            echo "↪️  有 $COUNT 个新提交，需要编译"
            echo "build_needed=true"  >> $GITHUB_OUTPUT
          else
            echo "✅  过去 24h 没有提交，跳过构建"
            echo "build_needed=false" >> $GITHUB_OUTPUT
          fi
  build:
    needs: check_changes
    runs-on: ubuntu-latest
    if: needs.check_changes.outputs.build_needed == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up C++ environment
        uses: aminya/setup-cpp@v1
        with:
          compiler: llvm
          cmake: true
          ninja: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-19

      - name: Install vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git /home/runner/vcpkg
          cd /home/runner/vcpkg
          ./bootstrap-vcpkg.sh

      - name: Install ANTLR4-runtime
        run: |
          /home/runner/vcpkg/vcpkg install antlr4:x64-linux-dynamic

      - name: Configure CMake
        run: |
          cmake -S . -B build \
          -DCMAKE_TOOLCHAIN_FILE=/home/runner/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DVCPKG_TARGET_TRIPLET=x64-linux-dynamic

      - name: Build project
        run: cmake --build build --config Release

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nightly-build
          path: build

      - name: Generate nightly tag
        run: echo "TAG=nightly-$(date +'%Y%m%d')-${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Zip binary
        run: |
          cd build
          zip riddlec-linux-amd64.zip riddlec

      - name: Create prerelease
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: Nightly Build
          prerelease: true          # 标记为预发布
          generate_release_notes: false
          files: build/riddlec-linux-amd64.zip